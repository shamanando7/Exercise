// // Напишите программу, которая принимает на вход число (А) и выдает сумму чисел от 1 до А

// // 7 -> 28 
// // 4 -> 10
// // 8 -> 36


// int SumFrom1ToA(int a) {                         // здесь функция объявляется
//     int result = 0;
    
//     for (var i = 0; i <= a; i++)                 // for (инициализатор(счетчик цикла); условие; итератор (шаг) {тело (выполняемые операторы)}
//          result += i;                            // while(условие)
//                                                  // {оператор (операторы)}
//     return result;                               // тут возвращается готовый result
// }                                           


// var number = int.Parse (Console.ReadLine()!);     // у нас есть число и сумма чисел до него, считываем (защита от дурака)
// if (number <= 0)
//     return;                                      

// var result = SumFrom1ToA(number);                 // функция вызывается здесь

// Console.WriteLine(result);



// // class Programm                                       // пример задачи для демонстрации работы цикла
// // {
// //     static void Main(string[]args)
// //     {
// //         for (int i = 0; i <= 10; i++)
// //         Console.WriteLine(i);
// //     }}
    

















// Теперь запишем все тоже самое через TryParse

// Это тоже функция, она возвращает bool


int Digits(int num)                          // логика программы выглядит вот так 
{                                            // тут вычисление по числу без строки, чистая математика
    if (num == 0)                            // если число равно нулю, то 0 это 1 символ
       return 1;

    var result = 0;

    while(num > 0)                           // если число больше нуля
    {
         num = num / 10;                     // то мы делим на 10
         result++;                           // ... и увеличиваем счетчик подряд на 1, и так делать до тех пор пока не получим число 0
    }
      
    for (var i = 1; ; i++) {                 // по желанию в функцию можно добавить и for, можно пропустить условия в цикле
        num = num / 10;                      // будет работать если отключить while
        
        if (num ==0)                         // ... и соответственно нужно прописать условия выхода из цикла
           return i;                         // внутри for есть три оператора, for (1й оператор выполняется перед началом цикла; 2й выполняется перед каждой итерацией цикла; 3й в конце каждой итерации)   можно запустить for (;;) - бесконечный цикл.
    }                                        // выход из цикла обязателен (return)


    return result;
}

                                                           // данная часть кода является проверкой на дурака

if (int.TryParse(Console.ReadLine()!, out var number))     // передаем входные данные
{                                                          // если данные распарсились мы попадаем в цикл if
if (number <= 0)                                           // если число меньше нуля, 
    return;                                                // ...то мы возвращаемся, потому что мы работаем только с положительными числами
                                                           
var result = Digits(number);
 
Console.WriteLine(result);                                 // если введено не число, то программа не завершается аварийно, а мы попадаем в ветку else
} else {
    Console.WriteLine("Введено не число или слишком большое число!");
}



// TryParse пытается распарсить. Если получилось то он сохраняет значение во вторую переменную (out var number) которую мы передали
// Если не получилось он ничего не сохраняет, и мы попадаем в ветку else.
// Программа работает только с положительными числами, чтобы включить отрицательные нужно на входе умножать на -1 или в while(num != 0) предварительное закоммитив if из TryParse. 
// прим. все что можно записать через while всегда можно записать через for




